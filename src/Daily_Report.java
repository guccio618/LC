import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import java.util.List;
/*******************************************************
 * (1). 括号类： *22， 
 * (2). 字符串切割: *131, *132, **139, **140,  
 * (3). 回文数: 
 * (4). Permutation 序列: **31, 46, *47, **60,  
 * 
 *******************************************************/





public class Daily_Report {	
	public static void main(String[] args){		
		int[] finish_by_company = {
				// linkin
				34, 46, 47, 104, 150, 152, 156, 170, 187, 198, 213, 337, 205, 243, 244, 245, 256, 339,
				// google
				4, 22, 31, 54, 66, 140, 162, 163, 212, 214, 228, 231, 246, 247, 249, 251, 259, 266, 270, 276, 279, 280, 281, 284, 288, 
				293, 294, 295, 298, 302, 305, 309, 310, 312, 315, 318, 323, 324, 326, 329, 330, 331, 332, 336, 340, 341, 345, 346, 348, 354, 
				// uber
				36, 39, 254, 290, 
				// airbnb
				108, 136, 137, 260, 190, 217, 219, 220, 
				// facebook
				1, 10, 13, 15, 17, 20, 23, 25, 26, 28, 33, 38, 44, 49, 50, 56, 57, 67, 69, 71, 75, 76, 78, 
				79, 80, 85, 88, 90, 91, 98, 102, 117, 121, 125, 127, 128, 133, 139, 146, 157, 158, 161, 168, 173, 
				200, 206, 208, 209, 210, 211, 215, 218, 221, 234, 235, 236, 238, 252, 253, 257, 261, 269, 274, 275, 
				277, 278, 283, 285, 286, 297, 301, 311, 314, 325, 334,
				// twitter
				12, 43, 118, 119, 202, 296,
				// zenefits
				51, 52, 109, 169, 229, 207, 255,
				// amazon
				2, 3, 5, 8, 21, 42, 48, 89, 138, 141, 142, 155, 160, 167, 186, 199, 204, 239, 240, 242, 
				// microsoft
				73, 94, 112, 114, 116, 124, 153, 154, 165, 171, 191, 237, 258, 333,
				// snapchat
				96, 95, 289,
				// apple
				70, 149,
				//yahoo
				
				//dropbox
				
				//Epic Systems
				306,
				// bloomberg
				7, 11, 16, 24, 53, 62, 63, 100, 101, 103, 105, 106, 110, 113, 122, 123, 131, 151, 172, 189, 225, 230, 232, 268, 287,
				// palantir
				303, 
				// Two Sigma
				342, 
				// yelp
				14, 347, 
				// pocket gems
				
				// adobe
				292, 				
				// other
				6, 9, 18, 19, 27, 29, 30, 32, 35, 40, 41, 45, 55, 58, 59, 61, 64, 72, 74, 77, 81, 82, 83, 84, 86, 87, 92, 93, 97, 99, 
				107, 111, 115, 120, 129, 130, 132, 134, 143, 144, 145, 147, 148, 159, 164, 179, 
				203, 216, 222, 223, 226, 227, 250, 263, 264, 267, 299, 300, 304, 307, 319, 322, 328, 338, 343, 344, 349, 350, 352, 				
		};
		
		
		
		int[] finish_by_session = {
			// DP
			10, 32, 44, 53, 72, 85, 87, 91, 95, 96, 97, 115, 120, 123, 132, 139, 140, 152, 188, 213, 263, 264, 276, 279, 300, 304, 309, 312, 343, 351, 354, 357, 
			// Tree
			99, 117, 124, 156, 222, 250, 255, 297, 333, 337, 
			// Graph & Search
			126, 127, 130, 133, 207, 261, 269, 301, 310, 329, 332, 341, 
			// Binary Search
			4, 29, 33, 50, 69, 153, 154, 162, 275, 302,
			// Linked List
			25, 109, 138, 141, 142, 143, 147, 148, 234, 287,
			// Backtrack
			22, 47, 52, 60, 77, 78, 79, 89, 93, 131, 211, 212, 254, 294, 351, 357, 
			// two pointers
			11, 18, 30, 42, 80, 159, 259, 
			// Hash Table
			149, 170, 205, 274, 311, 314, 325, 336, 347, 356, 358, 
			// Array
			31, 45, 48, 54, 84, 128, 163, 228, 229, 243, 277, 280, 289, 370, 
			// String
			5, 8, 12, 43, 71, 157, 158, 159, 161, 186, 214, 271, 
		};
		

		// by company
		/**************************************************************************************************
		 *  Bloomberg:
		 *  *5(两种方法), *13(注意顺序), 15, *26, 50(考虑细节问题), 56, 69(需考虑越界问题), 79(考虑test case), 
		 *  101(注意对称的概念), **117, *123, 138, 141(faster 从 head.next开始), **146, 151, **157, **158, *172,
		 *  **215, **225, 274, **275, 283, 297
		 * 
		 * 
		 * 
		 **************************************************************************************************/
		
		
		
		/**************************************************************************************************************************
		 * Round 3:
		 * 4, 5(两种方法), 10, 22(注意加括号添加的顺序), 25, 29, 31(细节), 32(look up), 43(理解具体的步骤), 45(细节), 48, 50(细节),  
		 * 60, 71(注意细节), 72, 79(注意细节), 80(注意细节), 87, 89(DP方法), 91, 93, 95, 96(注意具体细节), 99(细节), 
		 * 115(细节), 117, 124, 126, 132, 133, 134, 138(细节), 139(细节), 140, 143(细节), 146, 147(细节), 148, 149, 
		 * 154(细节), 156(解释), 157(细节), 158, 162(细节), 163, 170， 188, 
		 * 201, 212, 214(解释), 215, 218, 220(细节), 222(细节), 244, 245, 250,
		 * 251，255, 260(常规做法和位运算做法), 261, 264, 269, 271, 274, 275, 276, 280, 284(细节), 289, 296, 300(细节),
		 * 301, 305, 306, 307, 311, 312, 318, 319, 325(细节), 326, 330, 332, 333(细节), 336, 341, 343(细节), 347, 
		 * 351, 352, 356，357(细节), 358, 365, 370, 
		 * 
		 **************************************************************************************************************************/
		
		/****************************************************************************************************
		 * 使用Arrays.hashCode()来解题: 356
		 * k个字符的处理：hash[256]的应用, 358
		 * 
		 * 
		 ****************************************************************************************************/
		
		
		int[] finish = finish_by_session;
		
		Arrays.sort(finish);
		int preBase = 0;
		System.out.println("number = " + finish.length);
		
		for(int i = 0; i < finish.length; i++){
			if(finish[i] / 10 != preBase){
				preBase = finish[i] / 10;
				System.out.println();
			}
			System.out.print(finish[i] + ", ");
		}
	}
	
	public int[] func(){
		return new int[]{-1, -1};
	}
}
