————————————————————————————Matrix————————————————————————————————

Q120_Triangle
Given a triangle, find the minimum path sum from top to bottom. Each step you may move to adjacent numbers on the row below.

public class Q120_Triangle {
	public int minimumTotal(ArrayList<ArrayList<Integer>> triangle) {
        if(triangle == null || triangle.size() == 0)
 		    return 0;
        int n = triangle.size();
        int[][] sum = new int[n][n];

        for(int i = 0; i < n; i++)         //自底向上
sum[n-1][i] = triangle.get(n-1).get(i); 

        for(int i = n-2; i >= 0; i--){
            for(int j = 0; j <= i; j++){
                sum[i][j] = Math.min(sum[i+1][j], sum[i+1][j+1]) + triangle.get(i).get(j);
            }
        }
        return sum[0][0];
    }
}



Q064_ Minimum Path Sum
Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right which minimizes the sum of all numbers along its path.

public int minPathSum(int[][] grid) {
        if(grid == null) return 0;
        int m = grid.length;
        int n = grid[0].length;
        int[][] f = new int[m][n];
        f[0][0] = grid[0][0];

        for(int j = 1; j < n; j++)    //初始化边界
            f[0][j] = f[0][j-1] + grid[0][j];
        for(int i = 1; i < m; i++)    //初始化边界
f[i][0] = f[i-1][0] + grid[i][0];

        for(int i = 1; i < m; i++){
            for(int j = 1; j < n; j++){
                f[i][j] = Math.min(f[i][j-1], f[i-1][j]) + grid[i][j];
            }
        }
        return f[m-1][n-1];
    }



Q062_ Unique Path
A robot is located at the top-left corner of a m x n grid (marked 'Start' in the diagram below). The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked 'Finish' in the diagram below). How many possible unique paths are there?

public int uniquePaths(int m, int n) {
        if(m == 0 && n == 0) return 0;
        if(m < 0 || n < 0) return 0;
        int[][] f = new int[m][n];

        for(int j = 0; j < n; j++)     //初始化边界
            f[0][j] = 1;
        for(int i = 0; i < m; i++)     //初始化边界
f[i][0] = 1;

        for(int i = 1; i < m; i++){
            for(int j = 1; j < n; j++){
                f[i][j] = f[i-1][j] + f[i][j-1];
            }
        }
        return f[m-1][n-1];
    }



Q063_ Unique Path II
Follow up for "Unique Paths":
Now consider if some obstacles are added to the grids. How many unique paths would there be? An obstacle and empty space is marked as 1 and 0 respectively in the grid.

public int uniquePathsWithObstacles(int[][] obstacleGrid) {
		if (obstacleGrid == null || obstacleGrid.length == 0
				|| obstacleGrid[0].length == 0)
			return 0;
		int m = obstacleGrid.length;
		int n = obstacleGrid[0].length;
		int[][] f = new int[m][n];

		for (int j = 0; j < n; j++) {     //初始化边界
			if (obstacleGrid[0][j] == 0)
				f[0][j] = 1;
			else
				break;          //边界遇到“1”，表示此节点之后不通 
		}
		for (int i = 0; i < m; i++) {     //初始化边界
			if (obstacleGrid[i][0] == 0)
				f[i][0] = 1;
			else
				break;
		}

		for (int i = 1; i < m; i++) {
			for (int j = 1; j < n; j++) {
				if (obstacleGrid[i][j] == 1)
					f[i][j] = 0;
				else     //节点的路径数等于其上方和左方的节点路径数之和
					f[i][j] = f[i][j - 1] + f[i - 1][j];  
			}
		}
		return f[m - 1][n - 1];
	}



———————————————————————— Sequence DP ———————————————————————————
res[i]: 表示从i节点前跳到i节点的方案数
function: f[i] = f[i-1] + f[i-2]
initial: f[0] = 1;
answer: f[n]



Q70 Climbing stairs
You are climbing a stair case. It takes n steps to reach to the top.
Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?

public int climbStairs(int n) {
        if(n <= 0) return 0;
        if(n == 1) return 1;
        int last = 1, lastlast = 1;
        int now = 0;
        for(int i = 2; i <= n; i++){
            now = last + lastlast;
            lastlast = last;
            last = now;
        }
        return now;
    }



Q55 Jump Game
Given an array of non-negative integers, you are initially positioned at the first index of the array.
Each element in the array represents your maximum jump length at that position. Determine if you are able to reach the last index.

	//using DP
	public boolean canJump(int[] A) {
        boolean[] can = new boolean[A.length];
        can[0] = true;

        for (int i = 1; i < A.length; i++) {
            for (int j = 0; j < i; j++) {  // j是i之前的节点
                if (can[j] && j + A[j] >= i) { //i之前的节点j
                    can[i] = true;                //是否能到达i
                    break;
                }
            }
        }        
        return can[A.length - 1];
}

//Greedy
public boolean canJump(int[] nums) {
        if(nums == null || nums.length == 0) return false;
		int farthest = nums[0];
		int n = nums.length;
		for(int i = 0; i < n; i++){
			if(i <= farthest && i + nums[i] > farthest){
				farthest = i + nums[i];
			}
			if(farthest >= n-1) return true;
		}
		return farthest >= n-1;
    }




Q45 Jump Game II
Given an array of non-negative integers, you are initially positioned at the first index of the array. Each element in the array represents your maximum jump length at that position. Your goal is to reach the last index in the minimum number of jumps.
For example:
Given array A = [2,3,1,1,4]
The minimum number of jumps to reach the last index is 2. (Jump 1 step from index 0 to 1, then 3 steps to the last index.)

	//using DP
public int jump(int[] nums) {
        int[] steps = new int[nums.length];
        
        steps[0] = 0;
        for (int i = 1; i < nums.length; i++) {
            steps[i] = Integer.MAX_VALUE;
            for (int j = 0; j < i; j++) {
                if (steps[j] != Integer.MAX_VALUE && j + nums[j] >= i) {
                    steps[i] = steps[j] + 1;
                    break;
                }
            }
        }
        return steps[nums.length - 1];
    }

	//using Greedy
	public int jump2(int[] A) {
        if (A == null || A.length == 0) {
            return -1;
        }
        int start = 0, end = 0, jumps = 0;
        while (end < A.length - 1) {
            jumps++;
            int farthest = end;
            for (int i = start; i <= end; i++) {
                if (A[i] + i > farthest) {
                    farthest = A[i] + i;
                }
            }
            start = end + 1;
            end = farthest;
        }
        return jumps;
    }




——————————————————————用Matrix处理词划分的问题——————————————————————————




Q131 Palindrome Partitioning
Given a string s, partition s such that every substring of the partition is a palindrome.
Return all possible palindrome partitioning of s.



Q132 Palindrome Partitioning II
Given a string s, partition s such that every substring of the partition is a palindrome. Return the minimum cuts needed for a palindrome partitioning of s. For example, given s = "aab", Return 1 since the palindrome partitioning ["aa","b"] could be produced using 1 cut.

public boolean[][] getIsPalindrome(String s){
		//isPalindrome[]表示从i到j是否是回文串
	    boolean[][] isPalindrome = new boolean[s.length()][s.length()];
	    for(int i = 0; i < s.length(); i++)   //本身到本身是回文串
			isPalindrome[i][i] = true;     
	    for (int i = 0; i < s.length() - 1; i++)   //相临的两个字符是否是回文串
            isPalindrome[i][i + 1] = (s.charAt(i) == s.charAt(i + 1));                                       
		
	    for(int length = 2; length < s.length(); length++){
		    for(int start = 0; start + length < s.length(); start++){
			    isPalindrome[start][start + length] = (isPalindrome[start+1][start+length-1] && (s.charAt(start) == s.charAt(start+length)));
		    }
	    }
	    return isPalindrome;
    }

    public int minCut(String s){
	    if(s == null || s.length() == 0) return 0;
	    int[] f = new int[s.length()+1];  //到节点i为止最小cuts数
	    for(int i = 0; i <= s.length(); i++)
		    f[i] = i-1;
	    boolean[][] isPalindrome = getIsPalindrome(s);
	    for(int i = 1; i <= s.length(); i++){
		    for(int j = 0; j < i; j++){
			    if(isPalindrome[j][i-1])     //j处可以被cuts
				    f[i] = Math.min(f[i], f[j]+1); 
		    }
	    }
	    return f[s.length()];
    }




Q139 Word Break
Given a string s and a dictionary of words dict, determine if s can be segmented into a space-separated sequence of one or more dictionary words. For example, given
s = "leetcode", dict = ["leet", "code"].
Return true because "leetcode" can be segmented as "leet code".

public int getMaxWordLength(Set<String> dict) {
		int maxWordLength = 0;
		for (String word : dict)
			maxWordLength = Math.max(maxWordLength, word.length());
		return maxWordLength;
	}

	public boolean wordBreak(String s, Set<String> wordDict) {
		if (s == null || s.length() == 0)
			return true;
		int maxWordLength = getMaxWordLength(wordDict);
		//canSplit[]表示i节点处是否可以被切割
		boolean[] canSplit = new boolean[s.length() + 1];
		canSplit[0] = true;

		for (int i = 1; i <= s.length(); i++) {
			canSplit[i] = false;
			for (int lastWordLength = 1; lastWordLength <= maxWordLength
					&& lastWordLength <= i; lastWordLength++) {
				if (!canSplit[i-lastWordLength])  //上上个词是否是一个词 
					continue;
				String word = s.substring(i-lastWordLength, i);
				if (wordDict.contains(word)) {
					canSplit[i] = true;
					break;
				}
			}
		}
		return canSplit[s.length()];
	}







Q128_ Longest Consecutive Sequence
Given an unsorted array of integers, find the length of the longest consecutive elements sequence.
For example,
Given [100, 4, 200, 1, 3, 2],
The longest consecutive elements sequence is [1, 2, 3, 4]. Return its length: 4. Your algorithm should run in O(n) complexity.

public int longestConsecutive(int[] nums) {
        if(nums == null || nums.length == 0) return 0;
        Set<Integer> set = new HashSet<Integer>();
        int max = 1;

        for(int num: nums) 
            set.add(num);
            
        for(int num: nums) {
            if(set.remove(num)) {      //num hasn't been visited
                int val = num;
                int sum = 1;
                while(set.remove(val-1))  val--;  //左边连续
                sum += num - val;
                val = num;
                while(set.remove(val+1))  val++; //右边连续
                sum += val - num;
                max = Math.max(max, sum);
            }
        }
        return max;
}

